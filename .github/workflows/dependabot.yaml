name: Update Components

on:
  workflow_dispatch: # Run daily

jobs:
  update-components:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get latest Karpenter release version
        id: get-karpenter-version
        run: |
          latest_release=$(curl -s https://api.github.com/repos/aws/karpenter/releases/latest | jq -r '.tag_name')
          echo "::set-output name=version::$latest_release"

      - name: Extract Kube-Proxy Version
        id: get-kube-version
        run: |
          url="https://docs.aws.amazon.com/eks/latest/userguide/managing-kube-proxy.html"
          kube_proxy_version=$(curl -s "$url" | grep "1.27" | sed -nE 's/.*(v[0-9]+\.[0-9]+\.[0-9]+-minimal-eksbuild\.[0-9]+).*/\1/p' | head -n 1)
          echo "::set-output name=version::$kube_proxy_version"

      - name: Update components.json
        run: |
          Karp_version="${{ steps.get-karpenter-version.outputs.version }}"
          kube_version="${{ steps.get-kube-version.outputs.version }}"
          jq --arg Karp_version "$Karp_version" '.karpenter = $Karp_version' components.json > updated.json
          jq --arg kube_version "$kube_version" '.karpenter = $kube_version' updated.json > updated_1.json
          
          mv updated_1.json components.json

      - name: Commit changes
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git checkout -b PR
          git add components.json
          git commit -m "Update Karpenter version to ${{ steps.get-karpenter-version.outputs.version }}"
          git push origin PR

      - name: Create Pull Request
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.DEPENDA }}
          script: |
            const baseBranch = 'main';  // Replace with your base branch name
            const headBranch = 'PR';  // Replace with your feature branch name
            console.log(`Creating pull request from ${headBranch} to ${baseBranch}`);
            await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "Update Karpenter version to ${{ steps.get-karpenter-version.outputs.version }}",
              body: "This PR updates the Karpenter version to ${{ steps.get-karpenter-version.outputs.version }}.",
              base: baseBranch,
              head: headBranch,
            });
            
      - name: Get Kube-Proxy Version
        id: get-version
        run: |
          # Use curl to fetch the AWS EKS documentation page
          documentation_url="https://docs.aws.amazon.com/eks/latest/userguide/managing-kube-proxy.html"
          documentation_content=$(curl -s "$documentation_url")

          # Use grep to extract the kube-proxy version
          kube_proxy_version=$(echo "$documentation_content" | grep -oE 'kube-proxy minimal version\s*([0-9]+\.[0-9]+\.[0-9]+)')

          if [ -z "$kube_proxy_version" ]; then
            echo "Failed to retrieve kube-proxy version."
            exit 1
          fi

          # Output the version as an action output
          echo "::set-output name=version::$kube_proxy_version"

